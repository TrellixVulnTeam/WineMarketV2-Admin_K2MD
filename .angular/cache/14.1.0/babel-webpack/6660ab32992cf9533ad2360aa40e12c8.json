{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nimport * as i3 from \"../utils/auth.service\";\nconst _api = 'http://localhost:8080/api/v1/user/';\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http, cookieService, authService) {\n      this.http = http;\n      this.cookieService = cookieService;\n      this.authService = authService;\n    }\n\n    login(data) {\n      return this.http.post(_api + 'login', data);\n    }\n\n    logout() {\n      this.cookieService.delete('token');\n      this.cookieService.delete('user_Id');\n      this.cookieService.delete('isAdmin');\n      window.location.reload();\n    }\n\n    find(user_Id) {\n      return this.http.get(_api + user_Id, {\n        headers: this.authService.getHeaders()\n      });\n    }\n\n    update(data) {\n      return this.http.put(_api, data, {\n        headers: this.authService.getHeaders()\n      });\n    }\n\n    getAll() {\n      return this.http.get(_api, {\n        headers: this.authService.getHeaders()\n      });\n    }\n\n    create(data) {\n      return this.http.post(_api, data, {\n        headers: this.authService.getHeaders()\n      });\n    }\n\n    delete(id) {\n      return this.http.delete(_api + id, {\n        headers: this.authService.getHeaders()\n      });\n    }\n\n    filter(username, email, role) {\n      return this.http.get(_api + \"filter?_username=\" + username + \"&_email=\" + email + \"&_role=\" + role, {\n        headers: this.authService.getHeaders()\n      });\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService), i0.ɵɵinject(i3.AuthService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}